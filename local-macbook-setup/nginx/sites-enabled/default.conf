# HTTP to HTTPS redirect (Local Development)
server {
    listen 80;
    server_name localhost;
    return 301 https://$host:8444$request_uri;
}

# Main HTTPS server (Local Development)
server {
    listen 443 ssl;
    server_name localhost;

    # SSL Configuration (Self-signed for local)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;

    # Backend API (must come before frontend to take precedence)
    location /api/ {
        limit_req zone=api burst=50 nodelay;  # More relaxed for development

        # Rewrite /api/v1/* to /v1/* for backend
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://backend:4000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # CORS headers for development
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Allow-Credentials true;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # File uploads (larger size limit)
    location /api/upload {
        client_max_body_size 100m;

        proxy_pass http://backend:4000/upload;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Extended timeouts for uploads
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }



    # Backend API v1 endpoints (EXACT copy from EC2 setup)
    location /v1/ {
        limit_req zone=api burst=20 nodelay;

        proxy_pass http://backend:4000/v1/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;

        # Production timeouts (same as EC2)
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }





    # Portainer - Container Management (No auth for local development)
    # location /portainer/ {
    #     limit_req zone=admin burst=20 nodelay;

    #     # Strip /portainer prefix and pass to root
    #     rewrite ^/portainer/(.*) /$1 break;
    #     proxy_pass http://portainer:9000/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # WebSocket support for Portainer
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $connection_upgrade;

    #     # Portainer specific headers
    #     proxy_set_header X-Forwarded-Host $host;
    #     proxy_set_header X-Forwarded-Port $server_port;

    #     # Handle redirects properly - rewrite them back to /portainer/
    #     proxy_redirect ~^http://[^/]+/(.*) https://$host/portainer/$1;
    #     proxy_redirect ~^https://[^/]+/(.*) https://$host/portainer/$1;

    #     # Increase timeouts for Portainer
    #     proxy_connect_timeout 60s;
    #     proxy_send_timeout 60s;
    #     proxy_read_timeout 300s;
    # }

    # Adminer - Database Management (No auth for local development)
    location /adminer/ {
        limit_req zone=admin burst=20 nodelay;

        proxy_pass http://adminer:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # PHP specific settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
    }

    # Grafana static assets (JS, CSS, etc.)
    # location /grafana/public/ {
    #     proxy_pass http://grafana:3000/grafana/public/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # Cache static assets
    #     expires 1h;
    #     add_header Cache-Control "public, immutable";

    #     # Handle CORS for static assets
    #     add_header Access-Control-Allow-Origin *;
    #     add_header Access-Control-Allow-Methods "GET, OPTIONS";
    #     add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
    # }

    # Grafana - Monitoring Dashboard (No auth for local development)
    # location /grafana/ {
    #     limit_req zone=admin burst=30 nodelay;

    #     proxy_pass http://grafana:3000/grafana/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # WebSocket support for Grafana live features
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $connection_upgrade;

    #     # Grafana specific headers
    #     proxy_set_header X-Forwarded-Host $host;
    #     proxy_set_header X-Forwarded-Server $host;

    #     # Handle redirects properly
    #     proxy_redirect off;

    #     # Ensure proper content type handling
    #     proxy_set_header Accept-Encoding "";
    # }

    # Prometheus - Metrics (No auth for local development)
    # location /prometheus/ {
    #     limit_req zone=admin burst=30 nodelay;

    #     proxy_pass http://prometheus:9090/prometheus/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # Static file uploads (served directly by Nginx)
    location /uploads/ {
        alias /var/www/uploads/;
        expires 1h;  # Shorter cache for development
        add_header Cache-Control "public";

        # Security - prevent script execution
        location ~* \.(php|pl|py|jsp|asp|sh|cgi)$ {
            deny all;
        }
    }

    # Vite HMR WebSocket (Development Hot Reload)
    location /vite-dev-ws {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Disable buffering for WebSocket
        proxy_buffering off;
        proxy_cache off;
    }

    # Vite development files (node_modules, @vite, etc.)
    location ~ ^/(node_modules|@vite|@fs|@id)/ {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Disable caching for development files
        proxy_buffering off;
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Frontend Application (Main Site) - Must be last to catch all remaining requests
    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;

        # WebSocket support for Vite HMR
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Handle frontend assets and routes
        proxy_intercept_errors off;
        proxy_buffering off;
        proxy_cache off;

        # Disable caching for development
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Development info endpoint
    location /dev-info {
        access_log off;
        return 200 "PRS Local Development Environment\nPorts: HTTP=8080, HTTPS=8443\nDomain: localhost\n";
        add_header Content-Type text/plain;
    }

    # Robots.txt (block all for local development)
    location /robots.txt {
        access_log off;
        return 200 "User-agent: *\nDisallow: /\n";
        add_header Content-Type text/plain;
    }

    # Security - block common attack paths (relaxed for development)
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# WebSocket upgrade mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

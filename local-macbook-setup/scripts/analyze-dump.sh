#!/bin/bash

# PRS Database Dump Analyzer and Fixer
# This script analyzes production dump files and fixes common import issues

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

analyze_dump_file() {
    local dump_file="$1"
    
    if [ ! -f "$dump_file" ]; then
        log_error "Dump file not found: $dump_file"
        exit 1
    fi
    
    log_info "Analyzing dump file: $dump_file"
    
    # Check file size
    local file_size=$(du -h "$dump_file" | cut -f1)
    log_info "File size: $file_size"
    
    # Check encoding
    local encoding=$(file -b --mime-encoding "$dump_file")
    log_info "File encoding: $encoding"
    
    # Count tables
    local table_count=$(grep -c "COPY.*FROM stdin" "$dump_file" || echo "0")
    log_info "Number of tables: $table_count"
    
    # Check for specific problematic patterns
    log_info "Checking for potential issues..."
    
    # Check for user 150
    if grep -q "^150\s" "$dump_file"; then
        log_success "User 150 found in dump file"
    else
        log_warning "User 150 not found in dump file"
    fi
    
    # Check for RS-1233AA00000514
    if grep -q "RS-1233AA00000514" "$dump_file"; then
        log_success "Reference RS-1233AA00000514 found in dump file"
        local line_num=$(grep -n "RS-1233AA00000514" "$dump_file" | cut -d: -f1)
        log_info "Found at line: $line_num"
    else
        log_warning "Reference RS-1233AA00000514 not found in dump file"
    fi
    
    # Check for foreign key constraints
    local fk_count=$(grep -c "FOREIGN KEY" "$dump_file" || echo "0")
    log_info "Foreign key constraints found: $fk_count"
    
    # Check for common tables
    local common_tables=("users" "requisitions" "notifications" "companies" "projects")
    for table in "${common_tables[@]}"; do
        if grep -q "COPY public.$table" "$dump_file"; then
            local row_count=$(sed -n "/COPY public.$table/,/^\\\./p" "$dump_file" | grep -v "COPY\|^\\\." | wc -l)
            log_info "Table $table: $row_count rows"
        else
            log_warning "Table $table not found in dump"
        fi
    done
}

fix_dump_file() {
    local input_file="$1"
    local output_file="${input_file%.sql}_fixed.sql"
    
    if [ ! -f "$input_file" ]; then
        log_error "Input file not found: $input_file"
        exit 1
    fi
    
    log_info "Creating fixed version of dump file..."
    log_info "Input: $input_file"
    log_info "Output: $output_file"
    
    # Create a fixed version with proper constraint handling
    cat > "$output_file" << 'EOF'
-- Fixed PostgreSQL database dump with constraint handling
-- Generated by PRS Database Dump Analyzer

-- Disable foreign key checks during import
SET session_replication_role = replica;

-- Set proper client settings
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

EOF

    # Append the original dump content (skip the header if it exists)
    if grep -q "^-- PostgreSQL database dump" "$input_file"; then
        # Skip the original header and settings
        sed -n '/^CREATE EXTENSION/,$p' "$input_file" >> "$output_file"
    else
        # No header, append everything
        cat "$input_file" >> "$output_file"
    fi
    
    # Add footer to re-enable constraints
    cat >> "$output_file" << 'EOF'

-- Re-enable foreign key checks
SET session_replication_role = DEFAULT;

-- Update sequences for all tables
DO $$
DECLARE
    seq_record RECORD;
    max_id INTEGER;
    table_name TEXT;
BEGIN
    -- Fix sequences for all tables
    FOR seq_record IN
        SELECT schemaname, sequencename
        FROM pg_sequences
        WHERE schemaname = 'public'
    LOOP
        -- Extract table name from sequence name
        table_name := regexp_replace(seq_record.sequencename, '_id_seq$', '');
        
        -- Check if table exists and get max id
        IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = table_name AND table_schema = 'public') THEN
            EXECUTE format('SELECT COALESCE(MAX(id), 0) FROM %I', table_name) INTO max_id;
            
            IF max_id > 0 THEN
                EXECUTE format('SELECT setval(%L, %s)', seq_record.schemaname||'.'||seq_record.sequencename, max_id + 1);
                RAISE NOTICE 'Fixed sequence % for table % - set to %', seq_record.sequencename, table_name, max_id + 1;
            END IF;
        END IF;
    END LOOP;
END
$$;

-- Analyze tables for better performance
ANALYZE;

-- Final message
SELECT 'Database import completed successfully with constraint handling' AS status;
EOF

    log_success "Fixed dump file created: $output_file"
    
    # Compare file sizes
    local original_size=$(du -h "$input_file" | cut -f1)
    local fixed_size=$(du -h "$output_file" | cut -f1)
    log_info "Original size: $original_size, Fixed size: $fixed_size"
}

show_help() {
    echo "PRS Database Dump Analyzer and Fixer"
    echo ""
    echo "Usage: $0 [COMMAND] [FILE]"
    echo ""
    echo "Commands:"
    echo "  analyze <file>      Analyze dump file for potential issues"
    echo "  fix <file>          Create a fixed version of the dump file"
    echo "  help                Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 analyze dump.sql"
    echo "  $0 fix dump.sql"
}

# Main script logic
case "${1:-help}" in
    "analyze")
        if [ -z "$2" ]; then
            log_error "Please provide a dump file to analyze"
            show_help
            exit 1
        fi
        analyze_dump_file "$2"
        ;;
    "fix")
        if [ -z "$2" ]; then
            log_error "Please provide a dump file to fix"
            show_help
            exit 1
        fi
        fix_dump_file "$2"
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        log_error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac
